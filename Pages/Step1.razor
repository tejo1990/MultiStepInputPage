@page "/step1"

@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@inject BoothStateService BoothState


    <h3 class="form-title">
        @(string.IsNullOrEmpty(BoothState.CompanyName) ? "콘텐츠코리아2024" : BoothState.CompanyName) 
        @(string.IsNullOrEmpty(BoothState.BoothNumber) ? "" : $"- 부스 번호: {BoothState.BoothNumber}")
    </h3>
    
<div class="step-container">

    <h4>Step 1: 로그인</h4>
    
    <div class="form-group">
        <label for="boothNumber">부스 번호:</label>
        <input type="text" id="boothNumber" class="form-control" @bind="boothNumber" maxlength="3" />
    </div>
    <div class="form-group">
        <label for="accessCode">접근 번호:</label>
        <input type="text" id="accessCode" class="form-control" @bind="accessCode" maxlength="6" />
    </div>
    <button class="btn btn-primary" @onclick="HandleLogin">로그인</button>
</div>

@code {
    private string? boothNumber = "";
    private string accessCode = "";
    private List<string>? accessList;

    [Parameter]
    public EventCallback OnNext { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // 캐시를 무시하기 위해 쿼리 문자열 추가
            var fileContent = await HttpClient.GetStringAsync($"access.txt?v={DateTime.Now.Ticks}");
            accessList = fileContent.Split('\n').Select(line => line.Trim()).Where(line => !string.IsNullOrEmpty(line)).ToList();
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"파일을 읽는 중 오류 발생: {ex.Message}");
            await JSRuntime.InvokeVoidAsync("alert", "접근 정보를 로드하는 데 실패했습니다.");
        }
    }

    private async Task HandleLogin()
    {
        if (boothNumber == "999" && accessCode == "000000")
        {
            NavigationManager.NavigateTo("/admin");
            return;
        }

        if (accessList == null)
        {
            await JSRuntime.InvokeVoidAsync("alert", "접근 정보가 로드되지 않았습니다. 페이지를 새로고침해 주세요.");
            return;
        }

        var validAccess = accessList.FirstOrDefault(line => 
        {
            var parts = line.Split('|').Select(p => p.Trim()).ToArray();
            return parts.Length >= 3 && parts[0] == boothNumber && parts[2] == accessCode;
        });

        //Console.WriteLine($"현재 validAccess: {validAccess}, boothNumber: {boothNumber}, accessCode: {accessCode}");

        if (validAccess != null)
        {
            var parts = validAccess.Split('|').Select(p => p.Trim()).ToArray();
            string companyName = parts.Length > 1 ? parts[1] : "알 수 없음";

            BoothState.SetBoothNumber(boothNumber);
            BoothState.SetCompanyName(companyName);

            Console.WriteLine($"step1BoothNumber: {BoothState.BoothNumber}, CompanyName: {BoothState.CompanyName}");

            await JSRuntime.InvokeVoidAsync("alert", "접근이 허용되었습니다!");
            NavigationManager.NavigateTo("/showinfo");  // ShowInfo 컴포넌트로 이동
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "부스 번호 또는 접근 번호가 올바르지 않습니다.");
        }
    }
}

<style>
    h3 {
        color: #ecf0f1;
    }
    h4 {
        color: #ecf0f1;
    }

    .step-container {
        background-color: #34495e;
        padding: 20px;
        border-radius: 8px;
        width: 100%;
        max-width: 400px;
    }

    .form-group {
        margin-bottom: 15px;
    }

    .form-control {
        width: 100%;
        padding: 8px;
        border: none;
        border-radius: 4px;
        background-color: #ecf0f1;
        color: #2c3e50;
    }

    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        font-weight: bold;
    }

    .btn-primary {
        background-color: #3498db;
        color: #fff;
    }

    .btn-primary:hover {
        background-color: #2980b9;
    }

    label {
        color: #ecf0f1;
        display: block;
        margin-bottom: 5px;
    }
</style>
